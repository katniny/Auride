name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - tauri-app
    paths:
      - 'app/**'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}

    defaults:
      run:
        working-directory: ./app

    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm' # Set this to npm, yarn or pnpm.
          cache-dependency-path: "./app/package-lock.json"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Auride v__VERSION__ (Canary)'
          releaseBody: |
            This is a canary version of the Auride app generated automatically.
            Canary builds of the Auride app are built as soon as Auride is committed to on the main branch.
            Be sure to check in the app for any available updates.

            Install Instructions:
            - Windows: Download `auride___VERSION___x64-setup.exe` and run it to automatically install Auride
            - macOS: Download the `auride___VERSION___x64.dmg` or `auride___VERSION___aarch64.dmg`. You may need to go to "Security & Privacy" and allow the app to run
              - This is this way because it would cost us $99/yr and a Macbook (which I do not have) to do.
            - Linux:
              - Fedora: Download the `auride-__VERSION__-1.x86_64.rpm` and run it, whether in the terminal or a software storefront
              - Debian: Download the `auride___VERSION___amd64.deb` file and run it, whether in the terminal or a software storefront
              - Other Distros: Download the `auride___VERSION___amd64.AppImage` and run it, whether in the terminal or a software storefront
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}